# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull
# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
# test:
#   # Some packages might need a `test/commands` key to check CLI.
#   # List all the packages/modules that `run_test.py` imports.
#   imports:
#     - simplejson
#     - simplejson.tests
#   # For python packages, it is useful to run pip check. However, sometimes the
#   # metadata used by pip is out of date. Thus this section is optional if it is
#   # failing.
#   requires:
#     - pip
#   commands:
#     - pip check
schema_version: 1

context:
  name: open-dpcpp-toolkit
  version: 20.0.0

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``
  git: https://github.com/NAGAGroup/CodeAccelerate-SYCLBuildKit.git
  branch: main

build:
  # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
  # noarch: python
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # More info about selectors can be found in the conda-build docs:
  # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
  number: 0
  skip:
    - win
    - osx
    - match(cuda_compiler_version, "<12")
  script: build.sh

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx', 'fortran', among others
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - ${{ compiler('cuda') }}
    # this is necessary for all compiled recipes
    - ${{ stdlib('c') }}
    - ccache
    - git
    - python >3
    - cmake 3.24
    - pkg-config
    - pkgconfig
    - ninja
    - wget
    - git
    - lld
  host:
    - cuda-toolkit
    - zstd-static
    - libxml2
    - zlib
    - libhwloc
    - tbb-devel
  run:
    - cuda-toolkit
  run_exports:
    strong:
      - ${{ pin_subpackage('open-dpcpp-toolkit', exact=True) }}
      - ${{ pin_compatible('cuda-libraries', exact=True) }}
  run_constraints:
    - libllvm 999999999
    - libclang 999999999
    - libclang-cpp 999999999
    - clang-tools 999999999
    - libllvmspirv 999999999
    - ${{ pin_compatible('libstdcxx-devel_linux-64', exact=True) }}
    - ${{ pin_compatible(cuda_compiler, exact=true) }}

about:
  summary: DPC++ toolkit with nvidia support
  description: |
    DPC++ is the Intel's open-source clang toolkit for sycl. DPC++ 
    supports Nvidia GPUs, making the switch from CUDA possible without 
    new hardware.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: Apache-2.0
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file:
    - LICENSE.TXT
  # The doc_url and dev_url are optional.
  # doc_url: https://simplejson.readthedocs.io/
  # dev_url: https://github.com/simplejson/simplejson
  homepage: https://github.com/NAGAGroup/CodeAccelerate-SYCLBuildKit

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - jackm97
